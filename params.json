{
  "name": "FastLEDMatrix",
  "tagline": "FastLED port of https://github.com/adafruit/Adafruit_NeoMatrix",
  "body": "# FastLEDMatrix\r\n---------------------------\r\nFastLED port of ([Adafruit-NeoMatrix](https://github.com/adafruit/Adafruit_NeoMatrix)) and simple merge with ([cLEDMatrix](https://github.com/AaronLiddiment/LEDMatrix) by [Aaron Liddiment](https://github.com/AaronLiddiment))\r\n\r\n<table>\r\n  <tr>\r\n    <td colspan=\"2\">\r\n      The FastLEDMatrix library based on Adafruit-NeoMatrix and cLEDMatrix to create two-dimensional graphic displays using FastLED. You can then easily draw shapes, text and animation without having to calculate every X/Y pixel position. Larger displays can be formed using sections of LED strip / matrices, as shown in the photo below.\r\n    </td>\r\n  </tr>\r\n  <tr style=\"vertical-align: top;\">\r\n    <td width=\"50%\">\r\n      <strong>Table of Contents</strong>\r\n      <ul>\r\n      <li><a href=\"#single-matrix-example\">Signle Matrix</a>\r\n          <ul>\r\n            <li><a href=\"#parameters\">Parameter</a></li>\r\n            <li><a href=\"#includes\">Includes</a></li>\r\n            <li><a href=\"#decleration\">Decleration</a></li>\r\n            <li><a href=\"#initialize-fastled\">Initialize FastLED</a></li>\r\n          </ul>\r\n        </li>\r\n        <li><a href=\"#tile-matrix-example\">Tile Matrix</a>\r\n          <ul>\r\n            <li><a href=\"#parameters-1\">Parameter</a></li>\r\n            <li><a href=\"#includes-1\">Includes</a></li>\r\n            <li><a href=\"#decleration-1\">Decleration</a></li>\r\n            <li><a href=\"#initialize-fastled-1\">Initialize FastLED</a></li>\r\n            <li><a href=\"#initialize-fastled-multiple-controller\">Initialize FastLED (multiple controller)</a></li>\r\n          </ul>\r\n        </li>\r\n        <li><a href=\"#available-methods\">Available Methods</a></li>\r\n        </li>        \r\n        <li><a href=\"#graphic-library-fastled-gfx\">Graphic Library</a>\r\n          <ul>\r\n            <li><a href=\"#available-methods-1\">Available Methods</a></li>\r\n          </ul>\r\n        </li>        \r\n      </ul>\r\n    </td>\r\n    <td>\r\n      <img src=\"https://cdn-learn.adafruit.com/assets/assets/000/010/704/medium640/leds_hairy.png?1377844757\" alt=\"Espruino Pico OLED NFC\" />\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n## Single Matrix ([Example](examples/matrixtest/matrixtest.ino))\r\n----------------------------------------------------------------\r\n### Parameters\r\n| Parameter    | Description                                 | \r\n| ------------ |---------------------------------------------|\r\n| Parameter 1  | width of matrix                             |\r\n| Parameter 2  | height of matrix                            |\r\n| Parameter 3  | matrix layout flags, add together as needed |\r\n\r\n### Includes\r\n```c\r\n#include <FastLED.h>\r\n#include <FastLED_GFX.h>\r\n#include <FastLEDMatrix.h>\r\n```\r\n\r\n### Decleration\r\n```c\r\n// declare FastLED (matrix / LED strip)\r\n#define LED_PIN        2\r\n#define COLOR_ORDER    GRB\r\n#define CHIPSET        WS2812B\r\n\r\n// declare matrix\r\n#define MATRIX_WIDTH   5 // width of matrix\r\n#define MATRIX_HEIGHT  8 // height of matrix\r\n#define MATRIX_TYPE    (MTX_MATRIX_TOP + MTX_MATRIX_RIGHT + MTX_MATRIX_COLUMNS + MTX_MATRIX_PROGRESSIVE) // matrix layout flags, add together as needed\r\n\r\n// create our matrix based on matrix definition\r\ncFastLEDSingleMatrix<MATRIX_WIDTH, MATRIX_HEIGHT, MATRIX_TYPE> matrix;\r\n```\r\n\r\n### Initialize FastLED\r\n```c\r\nvoid setup() {\r\n  // initial FastLED by using CRGB led source from our matrix class\r\n  FastLED.addLeds<CHIPSET, LED_PIN, COLOR_ORDER>(matrix[0], matrix.Size());\r\n  FastLED.setBrightness(127);\r\n  FastLED.clear(true);\r\n}\r\n```\r\n\r\n\r\n## Tile Matrix ([Example](examples/tiletest/tiletest.ino))\r\n----------------------------------------------------------------\r\n### Parameters\r\n| Parameter    | Description                                       | \r\n| ------------ |---------------------------------------------------|\r\n| Parameter 1  | width of EACH NEOPIXEL MATRIX (not total display) |\r\n| Parameter 2  | height of each matrix                             |\r\n| Parameter 3  | number of matrices arranged horizontally          |\r\n| Parameter 4  | number of matrices arranged vertically            |\r\n| Parameter 5  | matrix layout flags, add together as needed       |\r\n\r\n### Includes\r\n```c\r\n#include <FastLED.h>\r\n#include <FastLED_GFX.h>\r\n#include <FastLEDMatrix.h>\r\n```\r\n\r\n### Decleration\r\n```c\r\n// declare FastLED (matrix / LED strip)\r\n#define LED_PIN        2\r\n#define COLOR_ORDER    GRB\r\n#define CHIPSET        WS2812B\r\n\r\n// declare matrix\r\n#define MATRIX_WIDTH        16 // width of EACH NEOPIXEL MATRIX (not total display)\r\n#define MATRIX_HEIGHT       16 // height of each matrix\r\n#define MATRIX_TILE_H       4  // number of matrices arranged horizontally\r\n#define MATRIX_TILE_V       1  // number of matrices arranged vertically\r\n#define MATRIX_TYPE        (MTX_MATRIX_TOP + MTX_MATRIX_LEFT + MTX_MATRIX_ROWS + MTX_MATRIX_ZIGZAG + MTX_TILE_TOP + MTX_TILE_LEFT + MTX_TILE_ROWS) // matrix layout flags, add together as needed\r\n#define MATRIX_SIZE        (MATRIX_WIDTH*MATRIX_HEIGHT)\r\n\r\n// create our matrix based on matrix definition\r\ncFastLEDMatrix<MATRIX_WIDTH, MATRIX_HEIGHT, MATRIX_TILE_H, MATRIX_TILE_V, MATRIX_TYPE> matrix;\r\n```\r\n\r\n### Initialize FastLED\r\n```c\r\nvoid setup() {\r\n  // initial FastLED by using CRGB led source from our matrix class\r\n  FastLED.addLeds<CHIPSET, LED_PIN, COLOR_ORDER>(matrix[0], matrix.Size());\r\n  FastLED.setBrightness(127);\r\n  FastLED.clear(true);\r\n}\r\n```\r\n\r\n### Initialize FastLED (multiple controller)\r\n```c\r\nvoid setup() {\r\n  // initial FastLED with multiple controller, by using CRGB led source from each matrix panal\r\n  // panel 1 (from   0 to  255)\r\n  FastLED.addLeds<WS2812B, PANEL_1_DATA_PIN, GRB>(matrix[0], 0, MATRIX_SIZE);\r\n  // panel 2 (from 255 to  511)\r\n  FastLED.addLeds<APA102, PANEL_2_DATA_PIN, PANEL_2_CLOCK_PIN, RGB>(matrix[0], 1*MATRIX_SIZE, MATRIX_SIZE);\r\n  // panel 3 (from 512 to  767)\r\n  FastLED.addLeds<SK9822, PANEL_3_DATA_PIN, PANEL_3_CLOCK_PIN, BGR>(matrix[0], 2*MATRIX_SIZE, MATRIX_SIZE);\r\n  // panel 4 (from 768 to 1023)\r\n  FastLED.addLeds<WS2812B, PANEL_4_DATA_PIN, GRB>(matrix[0], 3*MATRIX_SIZE, MATRIX_SIZE);\r\n  FastLED.setBrightness(127);\r\n  FastLED.clear(true);\r\n}\r\n```\r\n\r\n## Available Methods\r\n```c\r\nuint16_t mXY(uint16_t x, uint16_t y)\r\nvoid SetLEDArray(struct CRGB *pLED)\r\n\r\nstruct CRGB *operator[](int n)\r\nstruct CRGB &operator()(int16_t x, int16_t y)\r\nstruct CRGB &operator()(int16_t i)\r\n\r\nint Size()\r\nint Width()\r\nint Height()\r\n\r\nvoid HorizontalMirror(bool FullHeight = true)\r\nvoid VerticalMirror()\r\nvoid QuadrantMirror()\r\nvoid QuadrantRotateMirror()\r\nvoid TriangleTopMirror(bool FullHeight = true)\r\nvoid TriangleBottomMirror(bool FullHeight = true)\r\nvoid QuadrantTopTriangleMirror()\r\nvoid QuadrantBottomTriangleMirror()\r\n\r\nvoid DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, CRGB color)\r\nvoid DrawRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, CRGB color)\r\nvoid DrawCircle(int16_t xc, int16_t yc, uint16_t r, CRGB color)\r\nvoid DrawFilledRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, CRGB color)\r\nvoid DrawFilledCircle(int16_t xc, int16_t yc, uint16_t r, CRGB color)\r\n\r\nvoid drawPixel(int n, CRGB color)\r\nvoid drawPixel(int16_t x, int16_t y, CRGB color)\r\nstruct CRGB & pixel(int n)\r\nstruct CRGB & pixel(int16_t x, int16_t y)\r\nvoid fillScreen(CRGB color)\r\nvoid setRemapFunction(uint16_t (*fn)(uint16_t, uint16_t))\r\n```\r\n\r\n## Graphic Library ([FastLED-GFX](https://github.com/Jorgen-VikingGod/FastLED-GFX))\r\n----------------------------------------------------------------\r\nSimple FastLED port of ([Adafruit-GFX-Library](https://github.com/adafruit/Adafruit-GFX-Library))\r\n\r\n### Available Methods\r\n```c\r\nvoid drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, CRGB color)\r\nvoid drawFastVLine(int16_t x, int16_t y, int16_t h, CRGB color)\r\nvoid drawFastHLine(int16_t x, int16_t y, int16_t w, CRGB color)\r\nvoid drawRect(int16_t x, int16_t y, int16_t w, int16_t h, CRGB color)\r\nvoid fillRect(int16_t x, int16_t y, int16_t w, int16_t h, CRGB color)\r\nvoid fillScreen(CRGB color)\r\nvoid invertDisplay(boolean i)\r\n\r\nvoid drawCircle(int16_t x0, int16_t y0, int16_t r, CRGB color)\r\nvoid drawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, CRGB color)\r\nvoid fillCircle(int16_t x0, int16_t y0, int16_t r, CRGB color)\r\nvoid fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, CRGB color)\r\nvoid drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, CRGB color)\r\nvoid fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, CRGB color)\r\nvoid drawRoundRect(int16_t x0, int16_t y0, int16_t w, int16_t h, int16_t radius, CRGB color)\r\nvoid fillRoundRect(int16_t x0, int16_t y0, int16_t w, int16_t h, int16_t radius, CRGB color)\r\nvoid drawBitmap(int16_t x, int16_t y, const uint8_t *bitmap, int16_t w, int16_t h, CRGB color)\r\nvoid drawBitmap(int16_t x, int16_t y, const uint8_t *bitmap, int16_t w, int16_t h, CRGB color, CRGB bg)\r\nvoid drawBitmap(int16_t x, int16_t y, uint8_t *bitmap, int16_t w, int16_t h, CRGB color)\r\nvoid drawBitmap(int16_t x, int16_t y, uint8_t *bitmap, int16_t w, int16_t h, CRGB color, CRGB bg)\r\nvoid drawXBitmap(int16_t x, int16_t y, const uint8_t *bitmap, int16_t w, int16_t h, CRGB color)\r\nvoid drawChar(int16_t x, int16_t y, unsigned char c, CRGB color, CRGB bg, uint8_t size)\r\nvoid setCursor(int16_t x, int16_t y)\r\nvoid setTextColor(CRGB c)\r\nvoid setTextColor(CRGB c, CRGB bg)\r\nvoid setTextSize(uint8_t s)\r\nvoid setTextWrap(boolean w)\r\nvoid setRotation(uint8_t r)\r\nvoid cp437(boolean x=true)\r\nvoid setFont(const GFXfont *f = NULL)\r\nvoid getTextBounds(char *string, int16_t x, int16_t y, int16_t *x1, int16_t *y1, uint16_t *w, uint16_t *h)\r\nvoid getTextBounds(const __FlashStringHelper *s, int16_t x, int16_t y, int16_t *x1, int16_t *y1, uint16_t *w, uint16_t *h)\r\n\r\nsize_t write(uint8_t)\r\n\r\nint16_t height(void) const\r\nint16_t width(void) const\r\n\r\nuint8_t getRotation(void) const\r\n\r\nint16_t getCursorX(void) const\r\nint16_t getCursorY(void) const\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}